on:
  push:
    branches:
      - main
  workflow_dispatch:

name: 🚀 Provision and Deploy

jobs:
  provision:
    name: ☁️ Provision
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/azure-dev-cli-apps:latest

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: 🔓 Log in with Azure (Client Credentials)
        if: ${{ env.AZURE_CREDENTIALS != '' }}
        run: |
          $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
          Write-Host "::add-mask::$($info.clientSecret)"
          azd login `
            --client-id "$($info.clientId)" `
            --client-secret "$($info.clientSecret)" `
            --tenant-id "$($info.tenantId)"
        shell: pwsh
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ☁️ Azure Dev Provision
        run: azd provision --no-prompt
        env:
          AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  createVersion:
    name: 🔢 Create Version
    outputs:
      pkgVersion: ${{ steps.tag_version.outputs.new_tag }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3
      - name: Bump version and push tag
        id: tag_version
        uses: laputansoft/github-tag-action@v4.6
        with:
          release_branches: main
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.package-version.outputs.version }}

  deployToACR:
    name: 📦 Build and Push Image to ACR
    needs: [createVersion, provision]
    runs-on: ubuntu-latest
    env:
      PKG_VERSION: ${{needs.createVersion.outputs.pkgVersion}}
      REGISTRY_USERNAME: ""
    steps:
      - run: echo "$PKG_VERSION"
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Fetch the ACR Credentials
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            REGISTRY_USERNAME=$(az acr credential show -n ${{ secrets.REGISTRY_ENDPOINT }} --query username)
            echo '::add-mask::$REGISTRY_USERNAME'
            echo REGISTRY_USERNAME=$REGISTRY_USERNAME >> $GITHUB_ENV

      - name: Log into registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_ENDPOINT }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.REGISTRY_ENDPOINT }}/${{ vars.REMIX_APP_IMAGE_NAME }}:${{ env.PKG_VERSION }}

  deployToContainerApp:
    name: 🚀 Deploy Container to Container App
    needs: deployToACR
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Container to Azure Container App
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp up \
            --name ca-web-agtw7uioiu2do \
            --image ${{ secrets.REGISTRY_ENDPOINT }}/${{ vars.REMIX_APP_IMAGE_NAME }}:${{ env.PKG_VERSION }} \
            --ingress external \
            --target-port 80
