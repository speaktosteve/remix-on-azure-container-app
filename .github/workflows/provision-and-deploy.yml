on:
  push:
    branches:
      - main
  workflow_dispatch:

name: üöÄ Provision and Deploy

jobs:
  createVersion:
    name: Create Version
    outputs:
      pkgVersion: ${{ steps.tag_version.outputs.new_tag }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3
      - name: Bump version and push tag
        id: tag_version
        uses: laputansoft/github-tag-action@v4.6
        with:
          release_branches: main
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.package-version.outputs.version }}

  # provision:
  #   name: ‚òÅÔ∏è Provision
  #   if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}
  #   runs-on: ubuntu-latest
  #   needs: [createVersion]
  #   container:
  #     image: mcr.microsoft.com/azure-dev-cli-apps:latest

  #   steps:
  #     - name: ‚¨áÔ∏è Checkout repo
  #       uses: actions/checkout@v3

  #     - name: üîì Log in with Azure (Client Credentials)
  #       if: ${{ env.AZURE_CREDENTIALS != '' }}
  #       run: |
  #         $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
  #         Write-Host "::add-mask::$($info.clientSecret)"
  #         azd login `
  #           --client-id "$($info.clientId)" `
  #           --client-secret "$($info.clientSecret)" `
  #           --tenant-id "$($info.tenantId)"
  #       shell: pwsh
  #       env:
  #         AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: ‚òÅÔ∏è Azure Dev Provision
  #       run: azd provision --no-prompt
  #       env:
  #         AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
  #         AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
  #         AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

  deploy:
    name: Deploy
    needs: createVersion
    runs-on: ubuntu-latest
    env:
      PKG_VERSION: ${{needs.createVersion.outputs.pkgVersion}}
    steps:
      - run: echo "$PKG_VERSION"
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: Log into registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ACR_ENDPOINT }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.ACR_ENDPOINT }}/remix-amd:${{ env.PKG_VERSION }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp up \
             --name ca-web-agtw7uioiu2do \
             --image ${{ secrets.ACR_ENDPOINT }}/remix-amd:${{ env.PKG_VERSION }} \
             --ingress external \
             --target-port 3000
